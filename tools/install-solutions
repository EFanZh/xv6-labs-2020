#!/usr/bin/env python3

import os
from os import path
import shlex
import subprocess
from subprocess import CalledProcessError


def _run_command(args):
    command_line = ' '.join(map(shlex.quote, args))

    print("===> [{}]".format(command_line), flush=True)

    try:
        subprocess.run(args=args, check=True)
    except CalledProcessError:
        print("<=== [{}] [Failed]".format(command_line), flush=True)

        raise

    print("<=== [{}] [OK]".format(command_line), flush=True)


def main():
    project_dir = path.dirname(path.dirname(path.abspath(__file__)))
    labs_dir = path.join(project_dir, 'labs')
    solutions_dir = path.join(project_dir, 'solutions')

    # Reset submodules.

    _run_command(['git', '-C', project_dir, 'submodule', 'update', '--init', '-f', '--recursive'])

    # Apply patches.

    patches_dir = path.join(project_dir, 'patches')
    patches = [path.join(patches_dir, patch) for patch in os.listdir(patches_dir)]

    for lab in os.listdir(labs_dir):
        for patch in patches:
            try:
                _run_command(['git', '-C', path.join(labs_dir, lab), 'am', '--committer-date-is-author-date', patch])
            except CalledProcessError:
                _run_command(['git', '-C', path.join(labs_dir, lab), 'am', '--abort'])

                raise

    # Install solutions.

    for dir_path, _, file_names in os.walk(solutions_dir):
        for file_name in file_names:
            source = path.join(dir_path, file_name)
            target = path.join(labs_dir, path.relpath(source, solutions_dir))
            link_path = path.relpath(source, path.dirname(target))

            while True:
                try:
                    os.symlink(link_path, target)
                except FileExistsError:
                    os.remove(target)
                else:
                    break


if __name__ == '__main__':
    main()
